var randgen = require('randgen');

function generate_profiles(input_options, callback){

	var profile_length = 0;
	var profileNumbers = 0;
	var min = null;
	var max = null;
	var is_int = null;
	var profiles = [];
	var schemegenes = [];

	profile_length = input_options.profile_length || 7;
	min = input_options.min || 1;
	max = input_options.max || 7;
	profileNumbers = input_options.number_of_profiles || 10;
	mean = input_options.mean || 1;

	var randToUse = '';

	switch (input_options.distribution){
		case 'poisson':
			randToUse = 'rvpoisson';
			break;
		case 'norm':
			randToUse = 'rvnorm';
			break;
		case 'cauchy':
			randToUse = 'rvcauchy';
			break;
		case 'bernoully':
			randToUse = 'rvbernully';
			break;
		default:
			randToUse = 'rvnorm';
	}

	var firstProfile = true;

	for(i=0; i<profileNumbers; i++){
		var profileToUse = {};
		profileToUse["ID"] = String(i+1);
		if(firstProfile){
			firstProfile = false;
			schemegenes.push('ID');
			for(j=0; j<profile_length; j++){
				schemegenes.push(String(j+1));
			}
		}
		var newProfile = randgen[randToUse](profile_length);
		newProfile = newProfile.map(function(x){ return 1 + Math.abs(parseInt( mean * x ))});
		var count = 0;
		for(x in newProfile){
			count ++;
			profileToUse[String(count)] = String(newProfile[x]);
		}
		profiles.push(profileToUse);
	}

	var output = {};
	output.profiles = profiles;
	output.schemegenes = schemegenes;
	
	callback(output);
	
}

/*
var input_options = {
	profile_length: 4,
	number_of_profiles: 4,
	mean: 3,
	min: 1,
	max: 4,
	distribution: 'rvcauchy'
}


generate_profiles(input_options, function(output){
	console.log(output);
});
*/

module.exports = generate_profiles;

