var goeBURST = require('goeBURST');
var phylovizInput = require('phyloviz_input');
var build_graph = require('phyloviz_graph');
var phyloviz_link = require('phyloviz_metadata_link');


function phyloviz_graph(graph, canvasID, callback){

	checkForDuplicateProfiles(graph.profiles, graph.schemegenes, function(profileArray, identifiers){
		goeBURST(profileArray, identifiers, "prim", function(links, distanceMatrix){
			graph.links = links;
			graph.distanceMatrix = distanceMatrix;
			graph.positions = {};

			phylovizInput(graph, function(graphInput){
				build_graph(graphInput, canvasID, function(graphObject){
					graphObject.linkMethod = graph.linkMethod;
					graphObject.propertyIndex = graph.propertyIndex;
					phyloviz_link(graphObject, function(graphData){
						callback(graphData);
					});
				});
			});
		
		});
	});
	
}

function checkForDuplicateProfiles(profiles, schemeGenes, callback){

		var identifiers = {};
		var countProfiles = 0;
		var profileArray = [];
		
		var existsProfile = {};
		
		profiles.forEach(function(profile){
			var arr = [];
			for (i in schemeGenes) arr.push(profile[schemeGenes[i]]);
			//var arr = Object.keys(profile).map(function(k) { return profile[k] });
			var identifier = arr.shift();
			//arr.reverse();
			
			if(existsProfile[String(arr)]) {
				console.log('Profile already exists');
				//console.log(identifier);
			}
			
			else{
				existsProfile[String(arr)] = true;
				identifiers[countProfiles] = identifier;
				countProfiles += 1; 
				profileArray.push(arr);

			}
		});

		callback(profileArray, identifiers);

}

module.exports = phyloviz_graph;