var d3 = require('d3');

function getColors(data, callback){
	var arrayColors = [];
	var propertyIndex = {};
	var results = {};

	var color = d3.scaleCategory20();

	for (i in data){
		arrayColors.push(color(i).replace('#', '0x'));
		propertyIndex[data[i].label] = i;
	}

	results.arrayColors = arrayColors;
	results.propertyIndex = propertyIndex;

	callback(results);

}

function getDataFromNodes(linkInformation, callback){

	//var data = [];
	var linkMethod = linkInformation.data_link_info.linkMethod;
	var nodes = linkInformation.graphObject.graphInput.nodes;
	var propertyIndex = linkInformation.data_link_info.propertyIndex;

	var dataToCheck = [];

	if (linkMethod == 'isolates'){
		nodes.map(function(x){
			x.isolates.map(function(y){
				dataToCheck.push(y[propertyIndex]);
			});
		});
	}
	else if (linkMethod == 'profiles'){
		nodes.map(function(x){
			x.profile.map(function(y){
				dataToCheck.push(y);
			});
		});
	}

	callback(dataToCheck);


}


function gatherDuplicatesAndCounts(dataArray, callback){
	var gatherData = {};
	var data = [];
	
	for(i in dataArray){
		if (Number.isInteger(parseInt(i))){
			if (gatherData.hasOwnProperty(dataArray[i])) gatherData[dataArray[i]] += 1;
			else gatherData[dataArray[i]] = 1;
		}
	}

	for(i in gatherData){
	 	data.push({label: i, value: gatherData[i]});
	}

	callback(data);
}

module.exports = {
	getColors: getColors,
	getDataFromNodes: getDataFromNodes,
	gatherDuplicatesAndCounts: gatherDuplicatesAndCounts
}