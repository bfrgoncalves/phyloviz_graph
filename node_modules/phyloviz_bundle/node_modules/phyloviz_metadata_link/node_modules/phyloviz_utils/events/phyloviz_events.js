function launchGraphEvents(graphObject){

	var graphGL = graphObject.graphGL;
	var graphics = graphObject.graphics;
	var layout = graphObject.layout;
	var renderer = graphObject.renderer;

	graphObject.events = Viva.Graph.webglInputEvents(graphics, graphGL);

	graphObject.selectedNodes = [],
	graphObject.nodesToCheckLinks = [], 
	graphObject.toRemove = "";


	var ctrlDown = false, altDown = false, remakeSelection = false, multipleselection = false;

	var multiSelectOverlay;

  document.addEventListener('keydown', function(e) {

    if (e.which == 18) altDown = true;
  
    if (e.which === 16 && !multiSelectOverlay) { // shift key
      multipleselection = false;
      for (i in graphObject.selectedNodes){
        var nodeToUse = graphics.getNodeUI(graphObject.selectedNodes[i].id);
        nodeToUse.colorIndexes = nodeToUse.backupColor;
      } 
      graphObject.selectedNodes = [];

      if(graphObject.isLayoutPaused){
        renderer.resume();
        setTimeout(function(){ renderer.pause();}, 5);
      }
      
      multiSelectOverlay = startMultiSelect(graphObject);
    }

    if (e.which === 17){
      ctrlDown = true;
      if (!multipleselection ){
        for (i in graphObject.selectedNodes){
          var nodeToUse = graphics.getNodeUI(graphObject.selectedNodes[i].id);
          nodeToUse.colorIndexes = nodeToUse.backupColor;
          //nodeToUse.size = nodeToUse.backupSize;
        } 
        remakeSelection = false;
        graphObject.selectedNodes = [];

        if(graphObject.isLayoutPaused){
	        renderer.resume();
	        setTimeout(function(){ renderer.pause();}, 5);
	      }
      }
    }
    if (e.which === 87){
    	if (!graphObject.isLayoutPaused){
        	renderer.pause();
            graphObject.isLayoutPaused = true;
        }
        else{
        	renderer.resume();
            graphObject.isLayoutPaused = false;
        }
    }
  });
  document.addEventListener('keyup', function(e) {

    if (e.which === 16 && multiSelectOverlay) {
      multiSelectOverlay.destroy();
      multiSelectOverlay = null;

      graphGL.forEachNode(function(node){
        var currentNodeUI = graphics.getNodeUI(node.id);
        if (currentNodeUI.colorIndexes[0][0] == 0xFFA500ff) graphObject.selectedNodes.push(node);
      });
      multipleselection = true;

    }

    if (e.which === 17){
      ctrlDown = false;
    } 

    if (e.which == 18){

      altDown = false;
      restoreLinkSearch(graphObject);
      graphObject.nodesToCheckLinks = [];
      toRemove = "";

    }
    
  });
}

module.exports = launchGraphEvents;