function generateDOMLabels(graphObject){

var graphGL = graphObject.graphGL;
var graphics = graphObject.graphics;
var container = document.getElementById(graphObject.container);

var containerPosition = container.getBoundingClientRect();

var nodeLabels = Object.create(null);
      graphGL.forEachNode(function(node) {
        if (node.id.search('TransitionNode') < 0){
          var label = document.createElement('span');
          label.classList.add('node-label');
          label.innerText = node.id;
          nodeLabels[node.id] = label;
          container.appendChild(label);
        }
        
      });

  var countLinks = 0;
  var treeLinks = {};

  var linkLabels = Object.create(null);
  graphGL.forEachLink(function(link) {
      //console.log(link.id);
      var label = document.createElement('span');
      label.classList.add('link-label');
      label.innerText = parseFloat(link.data.connectionStrength.toFixed(4));
      treeLinks[link.id] = true;
      linkLabels[link.id] = label;
      container.appendChild(label);
      countLinks += 1;
    
    
  });

  graphObject.nodeLabels = nodeLabels;
  graphObject.linkLabels = linkLabels;
  graphObject.treeLinks = treeLinks;
  // NOTE: If your graph changes over time you will need to
  // monitor graph changes and update DOM elements accordingly
  //return [nodeLabels, linkLabels, treeLinks];

  graphObject.tovisualizeLabels = false;
  graphObject.tovisualizeLinkLabels = false;

  //$('.node-label').css('display','none');
  //$('.link-label').css('display','none');

  graphics.placeNode(function(ui, pos) {
      // This callback is called by the renderer before it updates
      // node coordinate. We can use it to update corresponding DOM
      // label position;

      // we create a copy of layout position
      var domPos = {
          x: pos.x,
          y: pos.y
      };
      // And ask graphics to transform it to DOM coordinates:
      graphics.transformGraphToClientCoordinates(domPos);

      // then move corresponding dom label to its own position:
      var nodeId = ui.node.id;
      if (nodeLabels[nodeId] != undefined){
        var labelStyle = nodeLabels[nodeId].style;
        labelStyle.left = domPos.x + 'px';
        labelStyle.top = domPos.y  + 'px';
        labelStyle.position = 'absolute';

        if (graphObject.tovisualizeLabels){

          if (domPos.y + containerPosition.top < containerPosition.top || domPos.y + containerPosition.top > containerPosition.bottom){
            labelStyle.display = "none";
          }
          else if (domPos.x + containerPosition.left < containerPosition.left || domPos.x + containerPosition.left*2 > containerPosition.right){
            labelStyle.display = "none";
          }
          else labelStyle.display = "block";

        }
      }
	});

  graphics.placeLink(function(ui, pos) {
          // This callback is called by the renderer before it updates
          // node coordinate. We can use it to update corresponding DOM
          // label position;
          newX = (ui.pos.from.x + ui.pos.to.x) / 2;
          newY = (ui.pos.from.y + ui.pos.to.y) / 2;

          // we create a copy of layout position

          var domPos = {
              x: newX,
              y: newY,
          };
          // And ask graphics to transform it to DOM coordinates:
          graphics.transformGraphToClientCoordinates(domPos);

          // then move corresponding dom label to its own position:
          var linkId = ui.idGL;

          if (linkLabels[linkId] != undefined){
            var labelStyle = linkLabels[linkId].style;
            labelStyle.left = domPos.x + 'px';
            labelStyle.top = domPos.y  + 'px';
            labelStyle.position = 'absolute';
            labelStyle.color = 'red';
            //console.log(labelStyle);

            if (graphObject.tovisualizeLinkLabels){

              if (domPos.y + containerPosition.top < containerPosition.top || domPos.y + containerPosition.top > containerPosition.bottom){
                labelStyle.display = "none";
              }
              else if (domPos.x + containerPosition.left < containerPosition.left || domPos.x + containerPosition.left*2 > containerPosition.right){
                labelStyle.display = "none";
              }
              else labelStyle.display = "block";

            }
          }
  });
}

module.exports = generateDOMLabels;