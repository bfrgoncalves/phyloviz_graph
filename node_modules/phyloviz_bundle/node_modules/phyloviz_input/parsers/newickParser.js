
function newickParser(dataset, callback){

	var newickParser = require('./index.js');

	if (Object.keys(dataset).length == 0) {
		callback({error: 'Dataset does not exists.'});
		return false;
	}

	try{
		JSONnewick = newickParser.parser.parse(dataset.newick);
	}
	catch(err){
		var graph ={};
		graph.error = 'Newick parser error: ' + err.message;
		callback(graph);
		return false;
	}

	countTransitionNodes = 0;

	var nodes = {};
	var links = [];
	var graph = {};
	var sameProfileHas = {};
	var maxLinkValue = -1;


	checkChildren(JSONnewick, function(){

			checkIsolates(dataset, function(){

				graph.nodes = Object.keys(nodes).map(function(k) { return nodes[k] }); // nodeObject to array
				graph.links = links;
				graph.schemeGenes = dataset.schemegenes;
				graph.metadata = dataset.metadata;
				graph.key = dataset.key;
				graph.data_type = dataset.data_type;
				graph.dataset_name = dataset.name;

				if(Object.keys(dataset.distanceMatrix).length == 0) graph.distanceMatrix = {}; //graph.positions = JSON.parse(dataset.positions);
				else graph.distanceMatrix = dataset.distanceMatrix;

				if(Object.keys(dataset.positions).length == 0) graph.positions = {}; //graph.positions = JSON.parse(dataset.positions);
				else graph.positions = dataset.positions;

				callback(graph);

			})		
	});



	function checkChildren(JSONnewick, callback){

		JSONnewick.visit(function(node) {
			var nodeName = '';
			
			if (node.data == '') nodeName = 'TransitionNode' + String(node.id);
			else nodeName = node.data;
				
			nodes[nodeName] = {key : nodeName, isolates: [], profile: []};

			for(i in node.children){
				targetName = '';
				if (node.children[i].data == '') targetName = 'TransitionNode' + String(node.children[i].id);
				else targetName = node.children[i].data;

				links.push({source: nodeName, target: targetName, value: node.children[i].branchlength});	
				
				if (maxLinkValue < node.children[i].branchlength) maxLinkValue = node.children[i].branchlength;
			}

		});

		callback();

	}


	function checkIsolates(dataset, callback){

		dataset.isolates.forEach(function(isolate){

			if (sameProfileHas.hasOwnProperty(isolate[dataset.key])){
				isolate[dataset.key] = sameProfileHas[isolate[dataset.key]];
			}

			if(nodes[isolate[dataset.key]]){
				var arr = [];
				for (i in dataset.metadata) arr.push(isolate[dataset.metadata[i]]);
				//var arr = Object.keys(isolate).map(function(k) { return isolate[k]; });
			}

			try{
				nodes[isolate[dataset.key]].isolates.push(arr);
			}
			catch (err){
				var x = true;
			}
			
		});

		callback();
	}
}


module.exports = function(JSONnewick, callback){

	newickParser(JSONnewick, function(graph){
		callback(graph);
	});
}